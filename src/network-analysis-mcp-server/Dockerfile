# Generated by https://smithery.ai. See: https://smithery.ai/docs/config#dockerfile
# Use a Python image with uv pre-installed
# FROM ghcr.io/astral-sh/uv:python3.11-alpine AS uv

FROM python:3.11-slim-bookworm

# The installer requires curl (and certificates) to download the release archive
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates

# install dependencies, then clean yum cache
RUN apt-get update && apt-get install -y gcc libkrb5-dev krb5-config krb5-user && apt-get clean && rm -rf /var/lib/apt/lists/*

# Download the latest installer
ADD https://astral.sh/uv/install.sh /uv-installer.sh

# Run the installer then remove it
RUN sh /uv-installer.sh && rm /uv-installer.sh

# Ensure the installed binary is on the `PATH`
ENV PATH="/root/.local/bin/:$PATH"


ADD . /app

# Set the working directory
WORKDIR /app

# Copy the necessary files
COPY pyproject.toml uv.lock ./

# Copy the rest of the application files
COPY main.py /app
COPY server.py /app
COPY .python-version /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
# ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

## Then, add the rest of the project source code and install it
## Installing separately from its dependencies allows optimal layer caching
#
#RUN --mount=type=cache,target=/root/.cache/uv \
#    uv sync --frozen --no-dev \

# Install the project's dependencies
#RUN --mount=type=cache,target=/root/.cache/uv uv sync --frozen --no-dev --no-editable

# Expose the port that the server will run on
EXPOSE 8090

# Default command to run the server
CMD ["uv", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8090"]
